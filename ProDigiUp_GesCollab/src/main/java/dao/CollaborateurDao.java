/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Other/File.java to edit this template
 */
package dao;

import entities.Collaborateur;
import entities.ResponsableActivite;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import dao.DaoFactory;
import entities.CollaborateurPrestationPartenaireRa;
import entities.Partenaire;
import entities.Prestation;
import entities.PrestationRaPartenaire;
import java.sql.Connection;
import java.util.List;

/**
 *
 * @author cberge
 */
public class CollaborateurDao extends Dao<Collaborateur> {

    public CollaborateurDao() {
        super("Collaborateur");
    }

    @Override
    protected Collaborateur createObject(ResultSet rs) throws SQLException {
        Collaborateur obj = new Collaborateur();
        obj.setId(rs.getInt("id_" + table));
        obj.setMatricule(rs.getInt("matricule"));
        obj.setNom(rs.getString("nom"));
        obj.setPrenom(rs.getString("prenom"));
        obj.setMail_1(rs.getString("mail_1"));
        obj.setTelephone_personnel(rs.getString("telephone_personnel"));
        obj.setStatut(rs.getString("statut"));
        obj.setCategorie(rs.getString("categorie"));
        obj.setGenre(rs.getString("genre"));
        obj.setRqth(rs.getString("rqth"));
        obj.setDate_de_renouvellement(rs.getDate("date_de_renouvellement").toLocalDate());
        obj.setMetier(rs.getString("metier"));

        return obj;
    }

    @Override
    public void create(Collaborateur obj) throws SQLException {
        String sql = "INSERT INTO  collaborateur (matricule, nom, prenom, mail_1, mail_2, telephone_personnel, statut, categorie, genre, rqth, date_de_renouvellement, metier)"
                + "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";

        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            pstmt.setInt(1, obj.getMatricule());
            pstmt.setString(2, obj.getNom());
            pstmt.setString(3, obj.getPrenom());
            pstmt.setString(4, obj.getMail_1());
            pstmt.setString(5, obj.getMail_2());
            pstmt.setString(6, obj.getTelephone_personnel());
            pstmt.setString(7, obj.getStatut());
            pstmt.setString(8, obj.getCategorie());
            pstmt.setString(9, obj.getGenre());
            pstmt.setString(10, obj.getRqth());
            LocalDate localDate = obj.getDate_de_renouvellement();
            if (localDate != null) {
                pstmt.setDate(11, java.sql.Date.valueOf(localDate));
            } else {
                pstmt.setDate(11, null);
            }
            pstmt.setString(12, obj.getMetier());
            int nbLines = pstmt.executeUpdate();
            if (nbLines == 1) {
                ResultSet autoGeneratedKeys = pstmt.getGeneratedKeys();
                autoGeneratedKeys.first();
                int id = autoGeneratedKeys.getInt(1);
                obj.setId(id);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'insertion : " + ex.getMessage());
            ex.printStackTrace();
            throw ex;

        }
    }

    @Override
    public Collaborateur read(Integer id) {
        Collaborateur obj = null;
        String sql = "SELECT * FROM collaborateur WHERE id_collaborateur=?";
        PreparedStatement pstmt;
        try {
            pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, id);
            ResultSet rs = pstmt.executeQuery();
            if (rs.first()) {
                obj = new Collaborateur();
                obj.setId(rs.getInt("id_collaborateur"));
                obj.setMatricule(rs.getInt("matricule"));
                obj.setNom(rs.getString("nom"));
                obj.setPrenom(rs.getString("prenom"));
                obj.setMail_1(rs.getString("mail_1"));
                obj.setMail_2(rs.getString("mail_2"));
                obj.setTelephone_personnel(rs.getString("telephone_personnel"));
                obj.setStatut(rs.getString("statut"));
                obj.setCategorie(rs.getString("categorie"));
                obj.setGenre(rs.getString("genre"));
                obj.setRqth(rs.getString("rqth"));
                if (rs.getDate("date_de_renouvellement") != null) {
                    obj.setDate_de_renouvellement(rs.getDate("date_de_renouvellement").toLocalDate());
                }
                obj.setMetier(rs.getString("metier"));
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la lecture : " + ex.getMessage());
        }
        return obj;
    }

    @Override
    public void update(Collaborateur obj) {
        String sql = "UPDATE collaborateur SET matricule=?, nom=?, prenom=?, mail_1=?, mail_2=?, telephone_personnel=?, statut=?, categorie=?, genre=?, rqth=?, date_de_renouvellement=?, metier=?"
                + "WHERE id_collaborateur=?";

        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, obj.getMatricule());
            pstmt.setString(2, obj.getNom());
            pstmt.setString(3, obj.getPrenom());
            pstmt.setString(4, obj.getMail_1());
            pstmt.setString(5, obj.getMail_2());
            pstmt.setString(6, obj.getTelephone_personnel());
            pstmt.setString(7, obj.getStatut());
            pstmt.setString(8, obj.getCategorie());
            pstmt.setString(9, obj.getGenre());
            pstmt.setString(10, obj.getRqth());
            LocalDate localDate = obj.getDate_de_renouvellement();
            if (localDate != null) {
                pstmt.setDate(11, java.sql.Date.valueOf(localDate));
            } else {
                pstmt.setDate(11, null);
            }

            pstmt.setString(12, obj.getMetier());

            pstmt.executeUpdate();

        } catch (SQLException ex) {
            System.out.println("Erreur lors de l'update : " + ex.getMessage());
        }
    }
    
    protected void delete (Integer id){
        String sql = "DELETE FROM collaborateur WHERE id_collaborateur=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, id);
             pstmt.executeUpdate();
              } catch (SQLException ex) {
            System.out.println("Erreur lors de l'update : " + ex.getMessage());
        }
    }

    public Collection<CollaborateurPrestationPartenaireRa> listCollaborateurPrestationPartenaireRa() {
        ArrayList<CollaborateurPrestationPartenaireRa> list = new ArrayList<>();
        Collection<Collaborateur> listeCollaborateur = list();
        for (Collaborateur collab : listeCollaborateur) {
            CollaborateurPrestationPartenaireRa collabPrestPartRa = new CollaborateurPrestationPartenaireRa();
            collabPrestPartRa.setCollaborateur(collab);

            Collection<Prestation> prestations = listPrestationCollaborateur(collab.getId());
            ArrayList<PrestationRaPartenaire> listPrestationsRaPart = new ArrayList<>();
            for (Prestation presta : prestations) {
                PrestationRaPartenaire prestRaPart = new PrestationRaPartenaire();
                prestRaPart.setPrestation(presta);
                prestRaPart.setResp(DaoFactory.ResponsableActiviteDao().read(presta.getId_ra()));
                prestRaPart.setPart(DaoFactory.getPartenaireDao().read(presta.getId_partenaire()));
                listPrestationsRaPart.add(prestRaPart);
            }
            collabPrestPartRa.setPrestRaPart(listPrestationsRaPart);
            collabPrestPartRa.setPrestationActive(!listPrestationCollaborateur(collab.getId()).isEmpty());
            list.add(collabPrestPartRa);
        }
        return list;
    }

    public Collection<Prestation> listPrestationCollaborateur(int idCollaborateur) {
        String sql = "SELECT * FROM prestation WHERE id_collaborateur=?";
        ArrayList<Prestation> list = new ArrayList<>();
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, idCollaborateur);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                int idPrestation = rs.getInt("id_prestation");
                Prestation prestation = DaoFactory.getPrestationDao().read(idPrestation);
                list.add(prestation);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return list;
    }

    // rajout test
    public boolean exists(int matricule) {
        String sql = "SELECT 1 FROM collaborateur WHERE matricule=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, matricule);
            ResultSet rs = pstmt.executeQuery();
            return rs.next();
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return false;
    }

    @Override
    public Collection<Collaborateur> list() {
        ArrayList<Collaborateur> list = new ArrayList<>();
        String sql = "SELECT * FROM collaborateur";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {

            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                Collaborateur c = new Collaborateur();
                c.setId(rs.getInt("id_collaborateur"));
                c.setMatricule(rs.getInt("matricule"));
                c.setNom(rs.getString("nom"));
                c.setPrenom(rs.getString("prenom"));
                c.setStatut(rs.getString("statut"));
                c.setMetier(rs.getString("metier"));

                list.add(c);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors du listage : " + ex.getMessage());
        }
        return list;
    }

    public List<Collaborateur> rechercherParNom(String nom) throws SQLException {
        return rechercher("SELECT * FROM collaborateur WHERE nom LIKE ?", nom);
    }

    public List<Collaborateur> rechercherParPrenom(String prenom) throws SQLException {
        return rechercher("SELECT * FROM collaborateur WHERE prenom LIKE ?", prenom);
    }

    public List<Collaborateur> rechercherParMatricule(String matricule) throws SQLException {
        return rechercher("SELECT * FROM collaborateur WHERE matricule LIKE ?", matricule);
    }

    private List<Collaborateur> rechercher(String sql, String param) throws SQLException {
        List<Collaborateur> collaborateurs = new ArrayList<>();
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            pstmt.setString(1, "%" + param + "%");
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Collaborateur collaborateur = new Collaborateur();
                    collaborateur.setId(rs.getInt("id_collaborateur"));
                    collaborateur.setMatricule(rs.getInt("matricule"));
                    collaborateur.setNom(rs.getString("nom"));
                    collaborateur.setPrenom(rs.getString("prenom"));
//                    collaborateur.setMail_1(rs.getString("mail_1"));
//                    collaborateur.setMail_2(rs.getString("mail_2"));
//                collaborateur.setTelephone_personnel(rs.getString("telephone_personnel"));
                    collaborateur.setStatut(rs.getString("statut"));
//                collaborateur.setCategorie(rs.getString("categorie"));
//                collaborateur.setGenre(rs.getString("genre"));
//                collaborateur.setRqth(rs.getString("rqth"));
//             collaborateur.setDate_de_renouvellement(rs.getDate("date_de_renouvellement").toLocalDate());
                    collaborateur.setMetier(rs.getString("metier"));
                    collaborateurs.add(collaborateur);
                }
            }
        }
        return collaborateurs;
    }
    public int getLastIdCreated(){
        String sql = "SELECT MAX(id_collaborateur) AS max_id FROM collaborateur";
        int maxId = 0;
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                maxId = rs.getInt("max_id");
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'exécution de la requête : " + ex.getMessage());
        }
        return maxId;
    }
}
