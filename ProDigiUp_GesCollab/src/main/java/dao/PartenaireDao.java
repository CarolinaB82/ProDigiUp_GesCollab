/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dao;

import entities.Partenaire;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author asolanas
 */
public class PartenaireDao extends Dao<Partenaire> {

    public PartenaireDao() {
        super("partenaire");
    }

    @Override
    protected Partenaire createObject(ResultSet rs) throws SQLException {
        Partenaire partenaire = new Partenaire() {
        };
        partenaire.setId(rs.getInt("id_" + table));
        partenaire.setNom(rs.getString("nom"));
        partenaire.setNumero_voie(rs.getInt("numero_voie"));
        partenaire.setAdresse(rs.getString("adresse"));
        partenaire.setCode_postal(rs.getInt("code_postal"));
        partenaire.setVille(rs.getString("ville"));

        return partenaire;
    }

    @Override
    protected void create(Partenaire partenaire) throws SQLException {
        String sql = "INSERT INTO partenaire (`nom`, `numero_voie`, `adresse`, `code_postal`, `ville`) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, partenaire.getNom());
            pstmt.setInt(2, partenaire.getNumero_voie());
            pstmt.setString(3, partenaire.getAdresse());
            pstmt.setInt(4, partenaire.getCode_postal());
            pstmt.setString(5, partenaire.getVille());
            int nbLines = pstmt.executeUpdate();
            if (nbLines == 1) {
                ResultSet autoGeneratedKeys = pstmt.getGeneratedKeys();
                autoGeneratedKeys.first();
                int id = autoGeneratedKeys.getInt(1);
                partenaire.setId(id);
                System.out.println("Partenaire créé avec succès!");
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'insertion : " + ex.getMessage());
            throw ex;
        }
    }
@Override
    public Partenaire read(Integer id) {
        Partenaire partenaire = null;
        String sql = "SELECT * FROM partenaire WHERE id_partenaire=?";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            System.out.println("Connexion établie : " + (connexion != null));
            pstmt.setInt(1, id);
            System.out.println("Exécution de la requête SQL : " + sql);
            ResultSet rs = pstmt.executeQuery();
            if (rs.first()) {
                partenaire = new Partenaire();
                partenaire.setId(rs.getInt("id_partenaire"));
                partenaire.setNom(rs.getString("nom"));
                partenaire.setNumero_voie(rs.getInt("numero_voie"));
                partenaire.setAdresse(rs.getString("adresse"));
                partenaire.setCode_postal(rs.getInt("code_postal"));
                partenaire.setVille(rs.getString("ville"));
                System.out.println("Partenaire trouvé : " + partenaire);
            }
        } catch (Exception e) {
            System.err.println("Erreur lors de la lecture : " + e.getMessage());
            e.printStackTrace(); // Imprimer la pile d'erreurs pour un meilleur débogage
        }
        return partenaire;
    }
    
    // rajout test
    public boolean exists(int nom) {
        String sql = "SELECT 1 FROM partenaire WHERE nom=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, nom);
            ResultSet rs = pstmt.executeQuery();
            return rs.next();
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return false;
    }

@Override
protected void update(Partenaire obj) {
    
    }
    
}
