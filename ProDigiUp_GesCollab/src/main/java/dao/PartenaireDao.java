/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package dao;

import entities.Partenaire;
import entities.Prestation;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 *
 * @author asolanas
 */
public class PartenaireDao extends Dao<Partenaire> {

    public PartenaireDao() {
        super("partenaire");
    }

    @Override
    protected Partenaire createObject(ResultSet rs) throws SQLException {
        Partenaire partenaire = new Partenaire() {
        };
        partenaire.setId(rs.getInt("id_" + table));
        partenaire.setNom(rs.getString("nom"));
        partenaire.setNumero_voie(rs.getInt("numero_voie"));
        partenaire.setAdresse(rs.getString("adresse"));
        partenaire.setCode_postal(rs.getInt("code_postal"));
        partenaire.setVille(rs.getString("ville"));

        return partenaire;
    }

    @Override
    public void create(Partenaire partenaire) throws SQLException {
        String sql = "INSERT INTO partenaire (`nom`, `numero_voie`, `adresse`, `code_postal`, `ville`) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, partenaire.getNom());
            pstmt.setInt(2, partenaire.getNumero_voie());
            pstmt.setString(3, partenaire.getAdresse());
            pstmt.setInt(4, partenaire.getCode_postal());
            pstmt.setString(5, partenaire.getVille());
            int nbLines = pstmt.executeUpdate();
            if (nbLines == 1) {
                ResultSet autoGeneratedKeys = pstmt.getGeneratedKeys();
                autoGeneratedKeys.first();
                int id = autoGeneratedKeys.getInt(1);
                partenaire.setId(id);
                System.out.println("Partenaire créé avec succès!");
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'insertion : " + ex.getMessage());
            throw ex;
        }
    }

    @Override
    public Partenaire read(Integer id) {
        Partenaire partenaire = null;
        String sql = "SELECT * FROM partenaire WHERE id_partenaire=?";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            System.out.println("Connexion établie : " + (connexion != null));
            pstmt.setInt(1, id);
            System.out.println("Exécution de la requête SQL : " + sql);
            ResultSet rs = pstmt.executeQuery();
            if (rs.first()) {
                partenaire = new Partenaire();
                partenaire.setId(rs.getInt("id_partenaire"));
                partenaire.setNom(rs.getString("nom"));
                partenaire.setNumero_voie(rs.getInt("numero_voie"));
                partenaire.setAdresse(rs.getString("adresse"));
                partenaire.setCode_postal(rs.getInt("code_postal"));
                partenaire.setVille(rs.getString("ville"));
                System.out.println("Partenaire trouvé : " + partenaire);
            }
        } catch (Exception e) {
            System.err.println("Erreur lors de la lecture : " + e.getMessage());
            e.printStackTrace(); // Imprimer la pile d'erreurs pour un meilleur débogage
        }
        return partenaire;
    }
  // Méthode pour mettre à jour la table des responsables d'activité associés au collaborateur
    private void updateResponsablesActivite(Connection conn, int partenaireId, List<Integer> responsableIds) throws SQLException {
        // Supprimer tous les enregistrements associés au collaborateur
        if(responsableIds != null){
            String deleteSql = "DELETE FROM proposer WHERE id_partenaire=?";
            try (PreparedStatement deleteStmt = conn.prepareStatement(deleteSql)) {
                deleteStmt.setInt(1, partenaireId);
                deleteStmt.executeUpdate();
            }

            // Insérer les nouveaux enregistrements
            String insertSql = "INSERT INTO proposer (id_partenaire, id_ra) VALUES (?, ?)";
            try (PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {
                for (int responsableId : responsableIds) {
                    insertStmt.setInt(1, partenaireId);
                    insertStmt.setInt(2, responsableId);
                    insertStmt.executeUpdate();
                }
            }         
        }
        
    }
    
    @Override
    public void update(Partenaire partenaire) {
        String sql = "UPDATE partenaire SET nom=?, numero_voie=?, adresse=?, code_postal=?, ville=?"
                + "WHERE id_partenaire=?";

        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setString(1, partenaire.getNom());
            pstmt.setInt(2, partenaire.getNumero_voie());
            pstmt.setString(3, partenaire.getAdresse());
            pstmt.setInt(4, partenaire.getCode_postal());
            pstmt.setString(5, partenaire.getVille());
            pstmt.setInt(6, partenaire.getId());
                    
            pstmt.executeUpdate();
            // Mettre à jour la table des responsables d'activité associés au collaborateur
            updateResponsablesActivite(connexion, partenaire.getId(), partenaire.getResponsablesIds());
            
        } catch (SQLException ex) {
            System.out.println("Erreur lors de l'update : " + ex.getMessage());
        }
    }
    public void delete (Integer id){
        String sql = "DELETE FROM partenaire WHERE id_partenaire=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, id);
             pstmt.executeUpdate();
              } catch (SQLException ex) {
            System.out.println("Erreur lors de l'update : " + ex.getMessage());
        }
    }
    

    // rajout test
    public boolean exists(String nom) {
        String sql = "SELECT 1 FROM partenaire WHERE nom=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setString(1, nom);
            ResultSet rs = pstmt.executeQuery();
            return rs.next();
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return false;
    }

    public Collection<Partenaire> listPartenaire(int idRa) {
        String sql = "SELECT id_partenaire FROM proposer WHERE id_ra=?";
        ArrayList<Partenaire> list = new ArrayList<>();
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, idRa);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                int idPartenaire = rs.getInt("id_partenaire");
                Partenaire partenaire = DaoFactory.getPartenaireDao().read(idPartenaire);
                list.add(partenaire);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return list;
    }
    
    public Collection<Prestation> listPrestationPartenaire(int idPartenaire) {
        String sql = "SELECT * FROM prestation WHERE id_partenaire=?";
        ArrayList<Prestation> list = new ArrayList<>();
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, idPartenaire);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                int idPrestation = rs.getInt("id_prestation");
                Prestation prestation = DaoFactory.getPrestationDao().read(idPrestation);
                list.add(prestation);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return list;
    }

    public int getLastIdCreated() {
        String sql = "SELECT MAX(id_partenaire) AS max_id FROM partenaire";
        int maxId = 0;
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                maxId = rs.getInt("max_id");
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'exécution de la requête : " + ex.getMessage());
        }
        return maxId;
    }
    
    
}
