/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Other/File.java to edit this template
 */
package dao;

import entities.Collaborateur;
import entities.Partenaire;
import entities.Prestation;
import entities.ResponsableActivite;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author cberge
 */
public class PrestationDao extends Dao<Prestation> {

    public PrestationDao() {
        super("Prestation");
    }

    @Override
    protected Prestation createObject(ResultSet rs) throws SQLException {
        Prestation prestation = new Prestation() {
        };
        prestation.setId(rs.getInt("id_" + table));
        prestation.setSiglum_presta(rs.getString("siglum_presta"));
        prestation.setNum_affaire(rs.getString("num_affaire"));
        prestation.setNom_presta(rs.getString("nom_presta"));
        prestation.setRef_fact_partenaire(rs.getString("ref_fact_partenaire"));
        prestation.setMail_partenaire(rs.getString("mail_partenaire"));
        prestation.setRef_fact_airbus(rs.getString("ref_fact_airbus"));
        prestation.setMail_airbus(rs.getString("mail_airbus"));
        prestation.setId_ra(rs.getInt("id_ra"));
        prestation.setId_collaborateur(rs.getInt("id_collaborateur"));
        prestation.setId_partenaire(rs.getInt("id_partenaire"));

        return prestation;
    }

    @Override
    public void create(Prestation presta) throws SQLException {
        String sql = "INSERT INTO prestation(siglum_presta, num_affaire, nom_presta, ref_fact_partenaire, mail_partenaire, ref_fact_airbus, mail_airbus, id_ra, id_collaborateur, id_partenaire) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, presta.getSiglum_presta());
            pstmt.setString(2, presta.getNum_affaire());
            pstmt.setString(3, presta.getNom_presta());
            pstmt.setString(4, presta.getRef_fact_partenaire());
            pstmt.setString(5, presta.getMail_partenaire());
            pstmt.setString(6, presta.getRef_fact_airbus());
            pstmt.setString(7, presta.getMail_airbus());
            pstmt.setObject(8, presta.getId_ra(), Types.INTEGER);
            pstmt.setObject(9, presta.getId_collaborateur(), Types.INTEGER);
            pstmt.setObject(10, presta.getId_partenaire(), Types.INTEGER);

            int nbLines = pstmt.executeUpdate();
            if (nbLines == 1) {
                ResultSet autoGeneratedKeys = pstmt.getGeneratedKeys();
                autoGeneratedKeys.first();
                int id = autoGeneratedKeys.getInt(1);
                presta.setId(id);
                System.out.println("Responsable d'activité créé avec succès!");
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'insertion : " + ex.getMessage());
            throw ex;
        }
    }

    @Override
    public Prestation read(Integer id) {
        Prestation obj = null;
        String sql = "SELECT * FROM prestation WHERE id_prestation=?";
        PreparedStatement pstmt;
        try {
            pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, id);
            ResultSet rs = pstmt.executeQuery();
            if (rs.first()) {
                obj = new Prestation();
                obj.setId(rs.getInt("id_prestation"));
                obj.setSiglum_presta(rs.getString("siglum_presta"));
                obj.setNum_affaire(rs.getString("num_affaire"));
                obj.setNom_presta(rs.getString("nom_presta"));
                obj.setRef_fact_partenaire(rs.getString("ref_fact_partenaire"));
                obj.setMail_partenaire(rs.getString("mail_partenaire"));
                obj.setRef_fact_airbus(rs.getString("ref_fact_airbus"));
                obj.setMail_airbus(rs.getString("mail_airbus"));
                obj.setId_ra(rs.getInt("id_ra"));
                obj.setId_collaborateur(rs.getInt("id_collaborateur"));
                obj.setId_partenaire(rs.getInt("id_partenaire"));
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la lecture : " + ex.getMessage());
        }
        return obj;
    }
    
     private void updatePartenaire(Connection conn, int prestationId, List<Integer> partenaireIds) throws SQLException {
        if (partenaireIds != null) {
            String deleteSql = "DELETE FROM proposer WHERE id_prestation=?";
            try (PreparedStatement deleteStmt = conn.prepareStatement(deleteSql)) {
                deleteStmt.setInt(1, prestationId);
                deleteStmt.executeUpdate();
            }
            String insertSql = "INSERT INTO proposer (id_presatation, id_partenaire) VALUES (?, ?)";
            try (PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {
                for (int partenaireId : partenaireIds) {
                    insertStmt.setInt(1, prestationId);
                    insertStmt.setInt(2, partenaireId);
                    insertStmt.executeUpdate();
                }
            }
        }
    }

    private void updateCollaborateur(Connection conn, int prestationId, List<Integer> collaborateurIds) throws SQLException {
        if (collaborateurIds != null) {
            String deleteSql = "DELETE FROM proposer WHERE id_prestation=?";
            try (PreparedStatement deleteStmt = conn.prepareStatement(deleteSql)) {
                deleteStmt.setInt(1, prestationId);
                deleteStmt.executeUpdate();
            }
            String insertSql = "INSERT INTO proposer (id_prestation, id_collaborateur) VALUES (?, ?)";
            try (PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {
                for (int collaborateurId : collaborateurIds) {
                    insertStmt.setInt(1, prestationId);
                    insertStmt.setInt(2, collaborateurId);
                    insertStmt.executeUpdate();
                }
            }
        }
    }

    private void updateResponsablesActivite(Connection conn, int prestationId, List<Integer> responsableIds) throws SQLException {
        if (responsableIds != null) {
            String deleteSql = "DELETE FROM proposer WHERE id_prestation=?";
            try (PreparedStatement deleteStmt = conn.prepareStatement(deleteSql)) {
                deleteStmt.setInt(1, prestationId);
                deleteStmt.executeUpdate();
            }

            String insertSql = "INSERT INTO proposer (id_prestation, id_ra) VALUES (?, ?)";
            try (PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {
                for (int responsableId : responsableIds) {
                    insertStmt.setInt(1, prestationId);
                    insertStmt.setInt(2, responsableId);
                    insertStmt.executeUpdate();
                }
            }
        }
    }


     @Override
    public void update(Prestation obj) {
        String sql = "UPDATE prestation SET siglum_presta=?, num_affaire=?, nom_presta=?, ref_fact_partenaire=?, mail_partenaire=?,"
                + " ref_fact_airbus=?, mail_airbus=?, id_ra=?, id_collaborateur=?, id_partenaire=? WHERE id_prestation=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setString(1, obj.getSiglum_presta());
            pstmt.setString(2, obj.getNum_affaire());
            pstmt.setString(3, obj.getNom_presta());
            pstmt.setString(4, obj.getRef_fact_partenaire());
            pstmt.setString(5, obj.getMail_partenaire());
            pstmt.setString(6, obj.getRef_fact_airbus());
            pstmt.setString(7, obj.getMail_airbus());
            pstmt.setInt(8, obj.getId_ra());
            pstmt.setInt(9, obj.getId_collaborateur());
            pstmt.setInt(10, obj.getId_partenaire());
            pstmt.setInt(11, obj.getId());

            pstmt.executeUpdate();

            updatePartenaire(connexion, obj.getId(), obj.getPartenaireIds());
            updateCollaborateur(connexion, obj.getId(), obj.getCollaborateurIds());
            updateResponsablesActivite(connexion, obj.getId(), obj.getResponsablesIds());
        } catch (SQLException ex) {
            System.out.println("Erreur lors de la mise à jour : " + ex.getMessage());
        }
    }

    public void delete(Integer id) {
        String sql = "DELETE FROM prestation WHERE id_prestation=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, id);
            pstmt.executeUpdate();
        } catch (SQLException ex) {
            System.out.println("Erreur lors du delete : " + ex.getMessage());
        }
    }

    public Collection<Prestation> listByNom(String nom_presta) {
        ArrayList<Prestation> listNom = new ArrayList<>();
        String sql = "SELECT * FROM " + table + " WHERE nom_presta =?";

        try (
                PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            pstmt.setString(1, nom_presta);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                Prestation obj = createObject(rs);
                listNom.add(obj);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        return listNom;
    }
    
//    @Override
//    public Collection<Prestation> list() {
//        ArrayList<Prestation> list = new ArrayList<>();
//        String sql = "SELECT * FROM prestation";
//        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
//
//            ResultSet rs = pstmt.executeQuery();
//            while (rs.next()) {
//                Prestation c = new Prestation();
//                c.setId(rs.getInt("id_prestation"));
//                c.setSiglum_presta(rs.getString("siglum_presta"));
//                c.setNum_affaire(rs.getString("numero_affaire"));
//                c.setNom_presta(rs.getString("nom_presta"));
//                c.setRef_fact_partenaire(rs.getString("ref_fact_partenaire"));
//                c.setMail_partenaire(rs.getString("mail_partenaire"));
//                c.setRef_fact_airbus(rs.getString("ref_fact_airbus"));
//                c.setMail_airbus(rs.getString("mail_airbus"));
//                c.setId_ra(rs.getInt("id_ra"));
//                c.setId_collaborateur(rs.getInt("id_collaborateur"));
//                c.setId_partenaire(rs.getInt("id_partenaire"));
//                list.add(c);
//            }
//        } catch (SQLException ex) {
//            System.err.println("Erreur lors du listage : " + ex.getMessage());
//        }
//        return list;
//    }

    // rajout test
    public boolean exists(String nom_presta) {
        String sql = "SELECT 1 FROM prestation WHERE nom_presta=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setString(1, nom_presta);
            ResultSet rs = pstmt.executeQuery();
            return rs.next();
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return false;
    }

    public Collection<Prestation> listPrestation() {
        ArrayList<Prestation> list = new ArrayList<>();
        String sql = "SELECT * FROM prestation";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {

            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                Prestation c = new Prestation();
                c.setId(rs.getInt("id_collaborateur"));
                c.setSiglum_presta(rs.getString("singlum_presta"));
                c.setNum_affaire(rs.getString("num_affaire"));
                c.setNom_presta(rs.getString("nom_presta"));
                c.setRef_fact_partenaire(rs.getString("ref_fact_partenaire"));
                c.setMail_partenaire(rs.getString("mail_partenaire"));
                c.setRef_fact_airbus(rs.getString("ref_fact_airbus"));
                c.setMail_airbus(rs.getString("mail_airbus"));
                c.setId_ra(rs.getInt("id_ra"));
                c.setId_collaborateur(rs.getInt("id_collaborateur"));
                c.setId_partenaire(rs.getInt("id_partenaire"));

                list.add(c);
            }

        } catch (SQLException ex) {
            System.err.println("Erreur lors du listage : " + ex.getMessage());
        }
        return list;
    }

    public int getLastIdCreated() {
        String sql = "SELECT MAX(id_prestation) AS max_id FROM prestation";
        int maxId = 0;
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                maxId = rs.getInt("max_id");
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'exécution de la requête : " + ex.getMessage());
        }
        return maxId;
    }



    

    

    public Collection<ResponsableActivite> listPrestationResponsableActivite(int idPrestation) {
        String sql = "SELECT id_ra FROM prestation WHERE id_prestation = ?";
        ArrayList<ResponsableActivite> list = new ArrayList<>();
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            pstmt.setInt(1, idPrestation);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    int idRa = rs.getInt("id_ra");
                    ResponsableActivite ra = DaoFactory.ResponsableActiviteDao().read(idRa);
                    if (ra != null) {
                        list.add(ra);
                    }
                }
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return list;
    }

    public Collection<Collaborateur> listPrestationCollaborateur(int idPrestation) {
        String sql = "SELECT id_collaborateur FROM prestation WHERE id_prestation = ?";
        ArrayList<Collaborateur> list = new ArrayList<>();
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            pstmt.setInt(1, idPrestation);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    int idCollaborateur = rs.getInt("id_collaborateur");
                    Collaborateur collaborateur = DaoFactory.getCollaborateurDao().read(idCollaborateur);
                    if (collaborateur != null) {
                        list.add(collaborateur);
                    }
                }
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return list;
    }

    public Collection<Partenaire> listPrestationPartenaire(int idPrestation) {
        String sql = "SELECT id_partenaire FROM prestation WHERE id_prestation = ?";
        ArrayList<Partenaire> list = new ArrayList<>();
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            pstmt.setInt(1, idPrestation);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    int idPartenaire = rs.getInt("id_partenaire");
                    Partenaire partenaire = DaoFactory.getPartenaireDao().read(idPartenaire);
                    if (partenaire != null) {
                        list.add(partenaire);
                    }
                }
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return list;
    }



}
