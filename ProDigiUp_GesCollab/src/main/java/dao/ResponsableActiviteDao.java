package dao;

import entities.ResponsableActivite;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author asolanas
 */
public class ResponsableActiviteDao extends Dao<ResponsableActivite> {

    public ResponsableActiviteDao() {
        super("ra");
    }

    @Override
    protected ResponsableActivite createObject(ResultSet rs) throws SQLException {
        ResponsableActivite ra = new ResponsableActivite() {
        };
        ra.setId(rs.getInt("id_" + table));
        ra.setMatricule(rs.getInt("matricule"));
        ra.setNom(rs.getString("nom"));
        ra.setPrenom(rs.getString("prenom"));
        ra.setTelephone_professionnel(rs.getString("telephone_professionnel"));
        ra.setTelephone_personnel(rs.getString("telephone_personnel"));

        return ra;
    }

    @Override
    public void create(ResponsableActivite ra) throws SQLException {
        String sql = "INSERT INTO ra(matricule, nom, prenom, telephone_professionnel, telephone_personnel) "
                + "VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS)) {
            pstmt.setInt(1, ra.getMatricule());
            pstmt.setString(2, ra.getNom());
            pstmt.setString(3, ra.getPrenom());
            pstmt.setString(4, ra.getTelephone_professionnel());
            pstmt.setString(5, ra.getTelephone_personnel());
            int nbLines = pstmt.executeUpdate();
            if (nbLines == 1) {
                ResultSet autoGeneratedKeys = pstmt.getGeneratedKeys();
                autoGeneratedKeys.first();
                int id = autoGeneratedKeys.getInt(1);
                ra.setId(id);
                System.out.println("Responsable d'activité créé avec succès!");
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'insertion : " + ex.getMessage());
            throw ex;
        }
    }

    @Override
    public ResponsableActivite read(Integer id) {
        ResponsableActivite ra = null;
        String sql = "SELECT * FROM ra WHERE id_ra=?";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            System.out.println("Connexion établie : " + (connexion != null));
            pstmt.setInt(1, id);
            System.out.println("Exécution de la requête SQL : " + sql);
            ResultSet rs = pstmt.executeQuery();
            if (rs.first()) {
                ra = new ResponsableActivite();
                ra.setId(rs.getInt("id_ra"));
                ra.setMatricule(rs.getInt("matricule"));
                ra.setNom(rs.getString("nom"));
                ra.setPrenom(rs.getString("prenom"));
                ra.setTelephone_professionnel(rs.getString("telephone_professionnel"));
                ra.setTelephone_personnel(rs.getString("telephone_personnel"));
                System.out.println("ResponsableActivite trouvé : " + ra);
            }
        } catch (Exception e) {
            System.err.println("Erreur lors de la lecture : " + e.getMessage());
            e.printStackTrace(); // Imprimer la pile d'erreurs pour un meilleur débogage
        }
        return ra;
    }

    @Override
    protected void update(ResponsableActivite obj) {
        String sql = "UPDATE ra SET nom=?, prenom=?, telephone_professionnel=?, telephone_personnel=?"
                + "WHERE id_ra=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setString(1, obj.getNom());
            pstmt.setString(2, obj.getPrenom());
            pstmt.setString(3, obj.getTelephone_professionnel());
            pstmt.setString(4, obj.getTelephone_personnel());
            pstmt.executeUpdate();

        } catch (SQLException ex) {
            System.out.println("Erreur lors de l'update : " + ex.getMessage());
        }

    }
    
    protected void delete (Integer id){
        String sql = "DELETE FROM ra WHERE id_ra=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, id);
             pstmt.executeUpdate();
              } catch (SQLException ex) {
            System.out.println("Erreur lors de l'update : " + ex.getMessage());
        }
    }

    // rajout test
    public boolean exists(int matricule) {
        String sql = "SELECT 1 FROM ra WHERE matricule=?";
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, matricule);
            ResultSet rs = pstmt.executeQuery();
            return rs.next();
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return false;
    }

    public Collection<ResponsableActivite> listResponsableActivite(int idCollaborateur) {
        String sql = "SELECT id_ra FROM posseder WHERE id_collaborateur=?";
        ArrayList<ResponsableActivite> list = new ArrayList<>();
        try {
            PreparedStatement pstmt = connexion.prepareStatement(sql);
            pstmt.setInt(1, idCollaborateur);
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                int idRa = rs.getInt("id_ra");
                ResponsableActivite responsableActive = DaoFactory.ResponsableActiviteDao().read(idRa);
                list.add(responsableActive);
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de la vérification de l'existence : " + ex.getMessage());
        }
        return list;
    }

    @Override
    public Collection<ResponsableActivite> list() {
        ArrayList<ResponsableActivite> list = new ArrayList<>();
        String sql = "SELECT * FROM ra";
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                ResponsableActivite ra = new ResponsableActivite();
                ra.setId(rs.getInt("id_ra"));
                ra.setMatricule(rs.getInt("matricule"));
                ra.setNom(rs.getString("nom"));
                ra.setPrenom(rs.getString("prenom"));
                list.add(ra);
            }
        } catch (Exception e) {
            System.out.println("Erreur lors du listage : " + e.getMessage());
        }
        return list;
    }

    public List<ResponsableActivite> rechercherRaParMatricule(String matricule) throws SQLException {
        return rechercherRa("SELECT * FROM ra WHERE matricule LIKE ?", matricule);
    }

    public List<ResponsableActivite> rechercherRaParNom(String nom) throws SQLException {
        return rechercherRa("SELECT * FROM ra WHERE nom LIKE ?", nom);
    }

    public List<ResponsableActivite> rechercherRaParPrenom(String prenom) throws SQLException {
        return rechercherRa("SELECT * FROM ra WHERE prenom LIKE ?", prenom);
    }

    private List<ResponsableActivite> rechercherRa(String sql, String param) throws SQLException {
        List<ResponsableActivite> responsablesActivites = new ArrayList<>();
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            pstmt.setString(1, "%" + param + "%");
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    ResponsableActivite ra = new ResponsableActivite();
                    ra.setId(rs.getInt("id_ra"));
                    ra.setMatricule(rs.getInt("matricule"));
                    ra.setNom(rs.getString("nom"));
                    ra.setPrenom(rs.getString("prenom"));
                    responsablesActivites.add(ra);
                }
            }
        }
        return responsablesActivites;
    }

    public int getLastIdCreated() {
        String sql = "SELECT MAX(id_ra) AS max_id FROM ra";
        int maxId = 0;
        try (PreparedStatement pstmt = connexion.prepareStatement(sql)) {
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                maxId = rs.getInt("max_id");
            }
        } catch (SQLException ex) {
            System.err.println("Erreur lors de l'exécution de la requête : " + ex.getMessage());
        }
        return maxId;
    }
}
